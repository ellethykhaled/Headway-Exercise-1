package P1.SQLScripts;

import java.io.FileWriter;
import java.io.IOException;
import java.util.*;

/**
 This is a class used only for generating data for the students_departments table
 As the data generated by ChatGPT-3.5 is not consistent
 **/

public class StudentsDepartmentsDataGenerator {
    public static void main(String... args) {

        int studentCount = 50;
        int departmentsCount = 10;

        // Reading input from the user
        System.out.print("Enter records count: ");
        Scanner myScanner = new Scanner(System.in);
        int recordsCount;

        try {
            recordsCount = myScanner.nextInt();
            if (recordsCount > 0)
                // Setting the number to operate on with a maximum of 200 records to avoid halting
                recordsCount = Math.min(recordsCount, 200);
            else
                throw new RuntimeException();
        } catch (Exception e) {
            System.out.println("Running program with default records count: 80");
            recordsCount = 80;
        }

        HashMap<Integer, ArrayList<Integer>> hashMap = new HashMap<>();
        generateMap(studentCount, departmentsCount, recordsCount, hashMap);

        String output = generateOutputString(hashMap);

        extractToFile(output);
    }

    private static void generateMap(int studentCount, int departmentsCount, int recordsCount, HashMap<Integer, ArrayList<Integer>> hashMap) {
        int generatedRecords = 0;
        Random random = new Random();

        int currentStudent;
        int currentDepartment;
        while (generatedRecords < recordsCount) {
            // Generate a student id (except last 2 students to ensure there are students with no departments)
            currentStudent = random.nextInt(studentCount - 2) + 1;

            // Generate a department id (except last 2 departments to ensure there are departments with no students)
            currentDepartment = random.nextInt(departmentsCount - 2) + 1;

            if (!hashMap.containsKey(currentStudent))
                hashMap.put(currentStudent, new ArrayList<>());
            else if (hashMap.get(currentStudent).contains(currentDepartment))
                continue;

            hashMap.get(currentStudent).add(currentDepartment);
            generatedRecords++;
        }
    }

    private static void extractToFile(String output) {
        try {
            FileWriter myWriter = new FileWriter("src/P1/SQLScripts/enrol.sql");
            myWriter.write(output);
            myWriter.close();
            System.out.println("File generated successfully");
        } catch (IOException e) {
            System.out.println("An error occurred");
            e.printStackTrace();
        }
    }

    private static String generateOutputString(HashMap<Integer, ArrayList<Integer>> hashMap) {
        StringBuilder output = new StringBuilder("INSERT INTO students_departments (student_id, department_id) VALUES\n");

        for (Map.Entry<Integer, ArrayList<Integer>> set : hashMap.entrySet()) {
            for (Integer i : set.getValue()) {
                output.append("(").append(set.getKey().toString()).append(",").append(i).append("),\n");
            }
        }
        output.delete(output.length() - 2, output.length());
        output.append(";");
        return output.toString();
    }
}
